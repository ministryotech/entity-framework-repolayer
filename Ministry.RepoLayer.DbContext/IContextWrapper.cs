//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq.Expressions;

namespace Ministry.RepoLayer.DbContext.Abstract
{
    /// <summary>
    /// Wrapping interface for the Entity Framework Context
    /// </summary>
    public interface IContextWrapper
    {
        /// <summary>
        /// Accepts all changes.
        /// </summary>
        void AcceptAllChanges();

        /// <summary>
        /// Adds the object.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        void AddObject(string entitySetName, object entity);

        /// <summary>
        /// Applies the current values.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="currentEntity">The current entity.</param>
        /// <returns></returns>
        TEntity ApplyCurrentValues<TEntity>(string entitySetName, TEntity currentEntity) where TEntity : class;

        /// <summary>
        /// Applies the original values.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="originalEntity">The original entity.</param>
        /// <returns></returns>
        TEntity ApplyOriginalValues<TEntity>(string entitySetName, TEntity originalEntity) where TEntity : class;

        /// <summary>
        /// Attaches the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void Attach(IEntityWithKey entity);

        /// <summary>
        /// Attaches to.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        void AttachTo(string entitySetName, object entity);

        /// <summary>
        /// Changes the state of the object.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="state">The state.</param>
        void ChangeObjectState<TEntity>(TEntity entity, EntityState state);

        /// <summary>
        /// Creates the database.
        /// </summary>
        void CreateDatabase();

        /// <summary>
        /// Creates the database script.
        /// </summary>
        /// <returns></returns>
        string CreateDatabaseScript();

        /// <summary>
        /// Creates the entity key.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        EntityKey CreateEntityKey(string entitySetName, object entity);

        /// <summary>
        /// Creates the object.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        T CreateObject<T>() where T : class;

        /// <summary>
        /// Creates the object set.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <returns></returns>
        ObjectSet<TEntity> CreateObjectSet<TEntity>() where TEntity : class;
        /// <summary>
        /// Creates the object set.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <returns></returns>
        ObjectSet<TEntity> CreateObjectSet<TEntity>(string entitySetName) where TEntity : class;

        /// <summary>
        /// Creates the proxy types.
        /// </summary>
        /// <param name="types">The types.</param>
        void CreateProxyTypes(IEnumerable<Type> types);

        /// <summary>
        /// Creates the query.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="queryString">The query string.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectQuery<T> CreateQuery<T>(string queryString, params ObjectParameter[] parameters);

        /// <summary>
        /// Databases the exists.
        /// </summary>
        /// <returns></returns>
        bool DatabaseExists();

        /// <summary>
        /// Deletes the database.
        /// </summary>
        void DeleteDatabase();

        /// <summary>
        /// Deletes the object.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void DeleteObject(object entity);

        /// <summary>
        /// Detaches the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void Detach(object entity);

        /// <summary>
        /// Detects the changes.
        /// </summary>
        void DetectChanges();

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources
        /// </summary>
        void Dispose();

        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        int ExecuteFunction(string functionName, params ObjectParameter[] parameters);

        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TElement> ExecuteFunction<TElement>(string functionName, params ObjectParameter[] parameters);
        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TElement> ExecuteFunction<TElement>(string functionName, MergeOption mergeOption, params ObjectParameter[] parameters);

        /// <summary>
        /// Executes the store command.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        int ExecuteStoreCommand(string commandText, params object[] parameters);

        /// <summary>
        /// Executes the store query.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="commandText">The command text.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TElement> ExecuteStoreQuery<TElement>(string commandText, params object[] parameters);
        /// <summary>
        /// Executes the store query.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="commandText">The command text.</param>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TEntity> ExecuteStoreQuery<TEntity>(string commandText, string entitySetName, MergeOption mergeOption, params object[] parameters);

        /// <summary>
        /// Gets the object by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns></returns>
        object GetObjectByKey(EntityKey key);

        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <param name="navigationProperty">The navigation property.</param>
        void LoadProperty(object entity, string navigationProperty);
        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="selector">The selector.</param>
        void LoadProperty<TEntity>(TEntity entity, Expression<Func<TEntity, object>> selector);
        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <param name="navigationProperty">The navigation property.</param>
        /// <param name="mergeOption">The merge option.</param>
        void LoadProperty(object entity, string navigationProperty, MergeOption mergeOption);
        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="selector">The selector.</param>
        /// <param name="mergeOption">The merge option.</param>
        void LoadProperty<TEntity>(TEntity entity, Expression<Func<TEntity, object>> selector, MergeOption mergeOption);

        /// <summary>
        /// Refreshes the specified refresh mode.
        /// </summary>
        /// <param name="refreshMode">The refresh mode.</param>
        /// <param name="collection">The collection.</param>
        void Refresh(RefreshMode refreshMode, IEnumerable collection);
        /// <summary>
        /// Refreshes the specified refresh mode.
        /// </summary>
        /// <param name="refreshMode">The refresh mode.</param>
        /// <param name="entity">The entity.</param>
        void Refresh(RefreshMode refreshMode, object entity);

        /// <summary>
        /// Saves the changes.
        /// </summary>
        /// <returns></returns>
        int SaveChanges();
        /// <summary>
        /// Saves the changes.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <returns></returns>
        int SaveChanges(SaveOptions options);

        /// <summary>
        /// Translates the specified reader.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="reader">The reader.</param>
        /// <returns></returns>
        ObjectResult<TElement> Translate<TElement>(DbDataReader reader);
        /// <summary>
        /// Translates the specified reader.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="reader">The reader.</param>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <returns></returns>
        ObjectResult<TEntity> Translate<TEntity>(DbDataReader reader, string entitySetName, MergeOption mergeOption);

        /// <summary>
        /// Tries the get object by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        bool TryGetObjectByKey(EntityKey key, out object value);
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

