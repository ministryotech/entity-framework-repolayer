//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ministry.RepoLayer.ObjContext.Repositories;

namespace Ministry.RepoLayer.ObjContext.Abstract
{
    /// <summary>
    /// Provides Repository Implementations
    /// </summary>
    public abstract class RepositoryFactoryBase : IRepositoryFactory
    {
		#region | Repositories |

		/// <summary>
        /// Gets the Project repository implementation.
        /// </summary>
        public IProjectsRepository Projects { get; protected set; }		
		/// <summary>
        /// Gets the Response repository implementation.
        /// </summary>
        public IResponsesRepository Responses { get; protected set; }		
		/// <summary>
        /// Gets the Category repository implementation.
        /// </summary>
        public ICategoriesRepository Categories { get; protected set; }		
		/// <summary>
        /// Gets the Action repository implementation.
        /// </summary>
        public IActionsRepository Actions { get; protected set; }		
		/// <summary>
        /// Gets the Risk repository implementation.
        /// </summary>
        public IRisksRepository Risks { get; protected set; }		
		/// <summary>
        /// Gets the Observation repository implementation.
        /// </summary>
        public IObservationsRepository Observations { get; protected set; }		
		#endregion

        /// <summary>
        /// Gets or sets the context.
        /// </summary>
        protected IEdmxContextWrapper Context { get; set; }

        /// <summary>
        /// Binds the repositories.
        /// </summary>
        /// <param name="contextWrapper">The context wrapper.</param>
        protected void BindRepositories(IEdmxContextWrapper contextWrapper)
        {
            Context = contextWrapper;
			
        	Projects = new ProjectsRepository(Context);		
        	Responses = new ResponsesRepository(Context);		
        	Categories = new CategoriesRepository(Context);		
        	Actions = new ActionsRepository(Context);		
        	Risks = new RisksRepository(Context);		
        	Observations = new ObservationsRepository(Context);		
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public virtual void Dispose()
        {		
        	if (Projects != null) Projects.Dispose();		
        	if (Responses != null) Responses.Dispose();		
        	if (Categories != null) Categories.Dispose();		
        	if (Actions != null) Actions.Dispose();		
        	if (Risks != null) Risks.Dispose();		
        	if (Observations != null) Observations.Dispose();		
        }

        /// <summary>
        /// Saves the current context state to the database.
        /// </summary>
        public void Save()
        {
            Context.SaveChanges();
        }

        /// <summary>
        /// Accepts all changes made to the underlying context.
        /// </summary>
        public void AcceptAllChanges()
        {
            Context.AcceptAllChanges();
        }

		/// <summary>
        /// Dumps and refreshes the underlying context, abandoning any outstanding changes.
        /// </summary>
        public virtual void Refresh()
		{
			Context.Dispose();
		    Context = new EdmxContextWrapper();
		    BindRepositories(Context);
		}
    }
}
